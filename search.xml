<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python调用DeepSeek API实战教程</title>
      <link href="/2025/11/01/Python%E8%B0%83%E7%94%A8DeepSeek-API%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/"/>
      <url>/2025/11/01/Python%E8%B0%83%E7%94%A8DeepSeek-API%E5%AE%9E%E6%88%98%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>DeepSeek 是一款由深度求索（DeepSeek）公司开发的大语言模型，以其强大的性能和亲民的价格受到开发者的欢迎。本文将详细介绍如何使用 Python 调用 DeepSeek API，帮助你快速上手 AI 应用开发。</p><hr><h2 id="什么是-DeepSeek？"><a href="#什么是-DeepSeek？" class="headerlink" title="什么是 DeepSeek？"></a>什么是 DeepSeek？</h2><p>DeepSeek 是一个高性能的大语言模型，支持：</p><ul><li>💬 对话生成</li><li>📝 文本创作</li><li>🔍 信息提取</li><li>💻 代码生成</li><li>🌐 多语言支持</li></ul><p>相比其他 AI 模型，DeepSeek 的优势在于：</p><ol><li><strong>性价比高</strong>：价格相对亲民</li><li><strong>响应速度快</strong>：推理速度优秀</li><li><strong>中文友好</strong>：对中文的理解和生成能力强</li><li><strong>API 兼容</strong>：兼容 OpenAI 的 API 格式</li></ol><hr><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><h3 id="1-安装必要的库"><a href="#1-安装必要的库" class="headerlink" title="1. 安装必要的库"></a>1. 安装必要的库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install openai requests</span><br></pre></td></tr></table></figure><h3 id="2-获取-API-Key"><a href="#2-获取-API-Key" class="headerlink" title="2. 获取 API Key"></a>2. 获取 API Key</h3><ol><li>访问 <a href="https://platform.deepseek.com/">DeepSeek 官网</a></li><li>注册并登录账号</li><li>在控制台创建 API Key</li><li>保存好你的 API Key（注意保密）</li></ol><hr><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h3 id="方法一：使用-OpenAI-SDK（推荐）"><a href="#方法一：使用-OpenAI-SDK（推荐）" class="headerlink" title="方法一：使用 OpenAI SDK（推荐）"></a>方法一：使用 OpenAI SDK（推荐）</h3><p>DeepSeek API 兼容 OpenAI 的接口格式，可以直接使用 OpenAI 的 Python SDK：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化客户端</span></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=<span class="string">&quot;your-deepseek-api-key&quot;</span>,  <span class="comment"># 替换为你的 API Key</span></span><br><span class="line">    base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span>  <span class="comment"># DeepSeek API 地址</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用 API</span></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,  <span class="comment"># 使用的模型</span></span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个有帮助的AI助手&quot;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;用Python写一个快速排序算法&quot;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    temperature=<span class="number">0.7</span>,  <span class="comment"># 控制输出的随机性</span></span><br><span class="line">    max_tokens=<span class="number">2000</span>   <span class="comment"># 最大token数</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印结果</span></span><br><span class="line"><span class="built_in">print</span>(response.choices[<span class="number">0</span>].message.content)</span><br></pre></td></tr></table></figure><h3 id="方法二：使用-requests-库"><a href="#方法二：使用-requests-库" class="headerlink" title="方法二：使用 requests 库"></a>方法二：使用 requests 库</h3><p>如果你想更灵活地控制请求，可以直接使用 requests：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_deepseek</span>(<span class="params">prompt, api_key</span>):</span><br><span class="line">    url = <span class="string">&quot;https://api.deepseek.com/v1/chat/completions&quot;</span></span><br><span class="line">    </span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;application/json&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Authorization&quot;</span>: <span class="string">f&quot;Bearer <span class="subst">&#123;api_key&#125;</span>&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&quot;model&quot;</span>: <span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">        <span class="string">&quot;messages&quot;</span>: [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: prompt&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="string">&quot;temperature&quot;</span>: <span class="number">0.7</span>,</span><br><span class="line">        <span class="string">&quot;max_tokens&quot;</span>: <span class="number">2000</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    response = requests.post(url, headers=headers, json=data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        result = response.json()</span><br><span class="line">        <span class="keyword">return</span> result[<span class="string">&#x27;choices&#x27;</span>][<span class="number">0</span>][<span class="string">&#x27;message&#x27;</span>][<span class="string">&#x27;content&#x27;</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;Error: <span class="subst">&#123;response.status_code&#125;</span> - <span class="subst">&#123;response.text&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">api_key = <span class="string">&quot;your-deepseek-api-key&quot;</span></span><br><span class="line">prompt = <span class="string">&quot;请介绍一下Python的装饰器&quot;</span></span><br><span class="line">answer = call_deepseek(prompt, api_key)</span><br><span class="line"><span class="built_in">print</span>(answer)</span><br></pre></td></tr></table></figure><hr><h2 id="进阶功能"><a href="#进阶功能" class="headerlink" title="进阶功能"></a>进阶功能</h2><h3 id="1-流式输出"><a href="#1-流式输出" class="headerlink" title="1. 流式输出"></a>1. 流式输出</h3><p>实现打字机效果，逐字输出内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=<span class="string">&quot;your-deepseek-api-key&quot;</span>,</span><br><span class="line">    base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启用流式输出</span></span><br><span class="line">stream = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=[</span><br><span class="line">        &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;写一首关于编程的诗&quot;</span>&#125;</span><br><span class="line">    ],</span><br><span class="line">    stream=<span class="literal">True</span>  <span class="comment"># 开启流式输出</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 逐步打印输出</span></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> stream:</span><br><span class="line">    <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(chunk.choices[<span class="number">0</span>].delta.content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>()</span><br></pre></td></tr></table></figure><h3 id="2-多轮对话"><a href="#2-多轮对话" class="headerlink" title="2. 多轮对话"></a>2. 多轮对话</h3><p>实现连续对话功能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeepSeekChat</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, api_key</span>):</span><br><span class="line">        self.client = OpenAI(</span><br><span class="line">            api_key=api_key,</span><br><span class="line">            base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">        )</span><br><span class="line">        self.messages = [</span><br><span class="line">            &#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;你是一个友好的AI助手&quot;</span>&#125;</span><br><span class="line">        ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chat</span>(<span class="params">self, user_input</span>):</span><br><span class="line">        <span class="comment"># 添加用户消息</span></span><br><span class="line">        self.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: user_input&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 调用API</span></span><br><span class="line">        response = self.client.chat.completions.create(</span><br><span class="line">            model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">            messages=self.messages,</span><br><span class="line">            temperature=<span class="number">0.7</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取助手回复</span></span><br><span class="line">        assistant_message = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        self.messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>, <span class="string">&quot;content&quot;</span>: assistant_message&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> assistant_message</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 清除对话历史，保留系统提示</span></span><br><span class="line">        self.messages = [self.messages[<span class="number">0</span>]]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line">chat = DeepSeekChat(<span class="string">&quot;your-deepseek-api-key&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(chat.chat(<span class="string">&quot;你好，请介绍一下自己&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chat.chat(<span class="string">&quot;你能帮我做什么？&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(chat.chat(<span class="string">&quot;我想学习Python，有什么建议吗？&quot;</span>))</span><br></pre></td></tr></table></figure><h3 id="3-函数调用（Function-Calling）"><a href="#3-函数调用（Function-Calling）" class="headerlink" title="3. 函数调用（Function Calling）"></a>3. 函数调用（Function Calling）</h3><p>让 AI 能够调用特定函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=<span class="string">&quot;your-deepseek-api-key&quot;</span>,</span><br><span class="line">    base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义可用的函数</span></span><br><span class="line">tools = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;function&quot;</span>,</span><br><span class="line">        <span class="string">&quot;function&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;get_weather&quot;</span>,</span><br><span class="line">            <span class="string">&quot;description&quot;</span>: <span class="string">&quot;获取指定城市的天气信息&quot;</span>,</span><br><span class="line">            <span class="string">&quot;parameters&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;type&quot;</span>: <span class="string">&quot;object&quot;</span>,</span><br><span class="line">                <span class="string">&quot;properties&quot;</span>: &#123;</span><br><span class="line">                    <span class="string">&quot;city&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;string&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;description&quot;</span>: <span class="string">&quot;城市名称，例如：北京、上海&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;required&quot;</span>: [<span class="string">&quot;city&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_weather</span>(<span class="params">city</span>):</span><br><span class="line">    <span class="comment"># 这里模拟获取天气（实际应该调用天气API）</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;city&#125;</span>今天天气晴朗，气温25度&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用API</span></span><br><span class="line">messages = [&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: <span class="string">&quot;北京今天天气怎么样？&quot;</span>&#125;]</span><br><span class="line"></span><br><span class="line">response = client.chat.completions.create(</span><br><span class="line">    model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">    messages=messages,</span><br><span class="line">    tools=tools,</span><br><span class="line">    tool_choice=<span class="string">&quot;auto&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否需要调用函数</span></span><br><span class="line">message = response.choices[<span class="number">0</span>].message</span><br><span class="line"><span class="keyword">if</span> message.tool_calls:</span><br><span class="line">    <span class="comment"># 执行函数调用</span></span><br><span class="line">    <span class="keyword">for</span> tool_call <span class="keyword">in</span> message.tool_calls:</span><br><span class="line">        <span class="keyword">if</span> tool_call.function.name == <span class="string">&quot;get_weather&quot;</span>:</span><br><span class="line">            args = json.loads(tool_call.function.arguments)</span><br><span class="line">            weather = get_weather(args[<span class="string">&quot;city&quot;</span>])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;天气信息: <span class="subst">&#123;weather&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="实用封装类"><a href="#实用封装类" class="headerlink" title="实用封装类"></a>实用封装类</h2><p>将常用功能封装成一个完整的工具类：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Dict</span>, <span class="type">Optional</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DeepSeekAPI</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;DeepSeek API 封装类&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, api_key: <span class="built_in">str</span>, model: <span class="built_in">str</span> = <span class="string">&quot;deepseek-chat&quot;</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        初始化DeepSeek客户端</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            api_key: DeepSeek API密钥</span></span><br><span class="line"><span class="string">            model: 使用的模型名称</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        self.client = OpenAI(</span><br><span class="line">            api_key=api_key,</span><br><span class="line">            base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">        )</span><br><span class="line">        self.model = model</span><br><span class="line">        self.conversation_history = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chat</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self, </span></span><br><span class="line"><span class="params">        message: <span class="built_in">str</span>, </span></span><br><span class="line"><span class="params">        system_prompt: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">        temperature: <span class="built_in">float</span> = <span class="number">0.7</span>,</span></span><br><span class="line"><span class="params">        max_tokens: <span class="built_in">int</span> = <span class="number">2000</span>,</span></span><br><span class="line"><span class="params">        stream: <span class="built_in">bool</span> = <span class="literal">False</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        发送单次对话请求</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            message: 用户消息</span></span><br><span class="line"><span class="string">            system_prompt: 系统提示（可选）</span></span><br><span class="line"><span class="string">            temperature: 温度参数，控制随机性</span></span><br><span class="line"><span class="string">            max_tokens: 最大token数</span></span><br><span class="line"><span class="string">            stream: 是否使用流式输出</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            AI的回复内容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        messages = []</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> system_prompt:</span><br><span class="line">            messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>, <span class="string">&quot;content&quot;</span>: system_prompt&#125;)</span><br><span class="line">        </span><br><span class="line">        messages.append(&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;)</span><br><span class="line">        </span><br><span class="line">        response = self.client.chat.completions.create(</span><br><span class="line">            model=self.model,</span><br><span class="line">            messages=messages,</span><br><span class="line">            temperature=temperature,</span><br><span class="line">            max_tokens=max_tokens,</span><br><span class="line">            stream=stream</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> stream:</span><br><span class="line">            <span class="keyword">return</span> self._handle_stream(response)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">chat_with_history</span>(<span class="params"></span></span><br><span class="line"><span class="params">        self,</span></span><br><span class="line"><span class="params">        message: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">        system_prompt: <span class="type">Optional</span>[<span class="built_in">str</span>] = <span class="string">&quot;你是一个有帮助的AI助手&quot;</span>,</span></span><br><span class="line"><span class="params">        temperature: <span class="built_in">float</span> = <span class="number">0.7</span>,</span></span><br><span class="line"><span class="params">        max_tokens: <span class="built_in">int</span> = <span class="number">2000</span></span></span><br><span class="line"><span class="params">    </span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        带历史记录的多轮对话</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        Args:</span></span><br><span class="line"><span class="string">            message: 用户消息</span></span><br><span class="line"><span class="string">            system_prompt: 系统提示</span></span><br><span class="line"><span class="string">            temperature: 温度参数</span></span><br><span class="line"><span class="string">            max_tokens: 最大token数</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">        Returns:</span></span><br><span class="line"><span class="string">            AI的回复内容</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        <span class="comment"># 如果是第一条消息，添加系统提示</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.conversation_history:</span><br><span class="line">            self.conversation_history.append(&#123;</span><br><span class="line">                <span class="string">&quot;role&quot;</span>: <span class="string">&quot;system&quot;</span>,</span><br><span class="line">                <span class="string">&quot;content&quot;</span>: system_prompt</span><br><span class="line">            &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 添加用户消息</span></span><br><span class="line">        self.conversation_history.append(&#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: message</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 调用API</span></span><br><span class="line">        response = self.client.chat.completions.create(</span><br><span class="line">            model=self.model,</span><br><span class="line">            messages=self.conversation_history,</span><br><span class="line">            temperature=temperature,</span><br><span class="line">            max_tokens=max_tokens</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取并保存助手回复</span></span><br><span class="line">        assistant_message = response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        self.conversation_history.append(&#123;</span><br><span class="line">            <span class="string">&quot;role&quot;</span>: <span class="string">&quot;assistant&quot;</span>,</span><br><span class="line">            <span class="string">&quot;content&quot;</span>: assistant_message</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> assistant_message</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">_handle_stream</span>(<span class="params">self, stream</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;处理流式输出&quot;&quot;&quot;</span></span><br><span class="line">        full_content = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> chunk <span class="keyword">in</span> stream:</span><br><span class="line">            <span class="keyword">if</span> chunk.choices[<span class="number">0</span>].delta.content <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">                content = chunk.choices[<span class="number">0</span>].delta.content</span><br><span class="line">                <span class="built_in">print</span>(content, end=<span class="string">&#x27;&#x27;</span>, flush=<span class="literal">True</span>)</span><br><span class="line">                full_content += content</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="keyword">return</span> full_content</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">clear_history</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;清除对话历史&quot;&quot;&quot;</span></span><br><span class="line">        self.conversation_history = []</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_history</span>(<span class="params">self</span>) -&gt; <span class="type">List</span>[<span class="type">Dict</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取对话历史&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> self.conversation_history</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">save_history</span>(<span class="params">self, filepath: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;保存对话历史到文件&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(self.conversation_history, f, ensure_ascii=<span class="literal">False</span>, indent=<span class="number">2</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">load_history</span>(<span class="params">self, filepath: <span class="built_in">str</span></span>):</span><br><span class="line">        <span class="string">&quot;&quot;&quot;从文件加载对话历史&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.conversation_history = json.load(f)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用示例</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 初始化</span></span><br><span class="line">    api = DeepSeekAPI(api_key=<span class="string">&quot;your-deepseek-api-key&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 单次对话</span></span><br><span class="line">    response = api.chat(<span class="string">&quot;用Python实现一个二分查找算法&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(response)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 多轮对话</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n=== 多轮对话示例 ===&quot;</span>)</span><br><span class="line">    api.clear_history()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户: 你好&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AI: <span class="subst">&#123;api.chat_with_history(<span class="string">&#x27;你好&#x27;</span>)&#125;</span>\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户: 我想学习Python&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AI: <span class="subst">&#123;api.chat_with_history(<span class="string">&#x27;我想学习Python&#x27;</span>)&#125;</span>\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;用户: 有什么好的学习资源推荐吗？&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;AI: <span class="subst">&#123;api.chat_with_history(<span class="string">&#x27;有什么好的学习资源推荐吗？&#x27;</span>)&#125;</span>\n&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 保存对话历史</span></span><br><span class="line">    api.save_history(<span class="string">&quot;conversation.json&quot;</span>)</span><br></pre></td></tr></table></figure><hr><h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><h3 id="1-API-Key-安全管理"><a href="#1-API-Key-安全管理" class="headerlink" title="1. API Key 安全管理"></a>1. API Key 安全管理</h3><p><strong>不要</strong>直接在代码中硬编码 API Key，使用环境变量：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> dotenv <span class="keyword">import</span> load_dotenv</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载.env文件</span></span><br><span class="line">load_dotenv()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从环境变量获取API Key</span></span><br><span class="line">api_key = os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>)</span><br><span class="line"></span><br><span class="line">client = OpenAI(</span><br><span class="line">    api_key=api_key,</span><br><span class="line">    base_url=<span class="string">&quot;https://api.deepseek.com&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>创建 <code>.env</code> 文件：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEEPSEEK_API_KEY=your-api-key-here</span><br></pre></td></tr></table></figure></p><h3 id="2-错误处理"><a href="#2-错误处理" class="headerlink" title="2. 错误处理"></a>2. 错误处理</h3><p>添加完善的错误处理机制：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> openai <span class="keyword">import</span> OpenAI</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">call_with_retry</span>(<span class="params">client, messages, max_retries=<span class="number">3</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;带重试机制的API调用&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> attempt <span class="keyword">in</span> <span class="built_in">range</span>(max_retries):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = client.chat.completions.create(</span><br><span class="line">                model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">                messages=messages,</span><br><span class="line">                timeout=<span class="number">30</span>  <span class="comment"># 设置超时</span></span><br><span class="line">            )</span><br><span class="line">            <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> attempt &lt; max_retries - <span class="number">1</span>:</span><br><span class="line">                wait_time = <span class="number">2</span> ** attempt  <span class="comment"># 指数退避</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;请求失败，<span class="subst">&#123;wait_time&#125;</span>秒后重试... 错误: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                time.sleep(wait_time)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;达到最大重试次数，请求失败: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><h3 id="3-Token-计数与成本控制"><a href="#3-Token-计数与成本控制" class="headerlink" title="3. Token 计数与成本控制"></a>3. Token 计数与成本控制</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">estimate_tokens</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;粗略估算token数量（中文约1.5字符=1token，英文约4字符=1token）&quot;&quot;&quot;</span></span><br><span class="line">    chinese_chars = <span class="built_in">sum</span>(<span class="number">1</span> <span class="keyword">for</span> char <span class="keyword">in</span> text <span class="keyword">if</span> <span class="string">&#x27;\u4e00&#x27;</span> &lt;= char &lt;= <span class="string">&#x27;\u9fff&#x27;</span>)</span><br><span class="line">    other_chars = <span class="built_in">len</span>(text) - chinese_chars</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(chinese_chars / <span class="number">1.5</span> + other_chars / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chat_with_budget</span>(<span class="params">client, message, max_budget_tokens=<span class="number">1000</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;带预算控制的对话&quot;&quot;&quot;</span></span><br><span class="line">    input_tokens = estimate_tokens(message)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> input_tokens &gt; max_budget_tokens:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;输入内容过长，超出预算限制&quot;</span></span><br><span class="line">    </span><br><span class="line">    response = client.chat.completions.create(</span><br><span class="line">        model=<span class="string">&quot;deepseek-chat&quot;</span>,</span><br><span class="line">        messages=[&#123;<span class="string">&quot;role&quot;</span>: <span class="string">&quot;user&quot;</span>, <span class="string">&quot;content&quot;</span>: message&#125;],</span><br><span class="line">        max_tokens=max_budget_tokens - input_tokens</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> response.choices[<span class="number">0</span>].message.content</span><br></pre></td></tr></table></figure><hr><h2 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h2><h3 id="案例1：智能代码审查助手"><a href="#案例1：智能代码审查助手" class="headerlink" title="案例1：智能代码审查助手"></a>案例1：智能代码审查助手</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">code_review</span>(<span class="params">code: <span class="built_in">str</span>, language: <span class="built_in">str</span> = <span class="string">&quot;Python&quot;</span></span>) -&gt; <span class="built_in">str</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;使用DeepSeek进行代码审查&quot;&quot;&quot;</span></span><br><span class="line">    api = DeepSeekAPI(api_key=os.getenv(<span class="string">&quot;DEEPSEEK_API_KEY&quot;</span>))</span><br><span class="line">    </span><br><span class="line">    prompt = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">请对以下<span class="subst">&#123;language&#125;</span>代码进行审查，重点关注：</span></span><br><span class="line"><span class="string">1. 代码质量和规范性</span></span><br><span class="line"><span class="string">2. 潜在的bug和安全问题</span></span><br><span class="line"><span class="string">3. 性能优化建议</span></span><br><span class="line"><span class="string">4. 可读性和可维护性</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">代码：</span></span><br><span class="line"><span class="string">```<span class="subst">&#123;language.lower()&#125;</span></span></span><br><span class="line"><span class="string"><span class="subst">&#123;code&#125;</span></span></span><br></pre></td></tr></table></figure><p>请给出详细的审查意见和改进建议。<br>“””</p><pre><code>return api.chat(prompt, temperature=0.3)</code></pre><h1 id="使用示例"><a href="#使用示例" class="headerlink" title="使用示例"></a>使用示例</h1><p>code = “””<br>def divide(a, b):<br>    return a / b</p><p>result = divide(10, 0)<br>print(result)<br>“””</p><p>review = code_review(code)<br>print(review)<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 案例2：智能文档生成器</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">def generate_documentation(code: str) -&gt; str:</span><br><span class="line">    &quot;&quot;&quot;自动生成代码文档&quot;&quot;&quot;</span><br><span class="line">    api = DeepSeekAPI(api_key=os.getenv(&quot;DEEPSEEK_API_KEY&quot;))</span><br><span class="line">    </span><br><span class="line">    prompt = f&quot;&quot;&quot;</span><br><span class="line">请为以下代码生成详细的文档注释，包括：</span><br><span class="line">1. 函数/类的功能描述</span><br><span class="line">2. 参数说明</span><br><span class="line">3. 返回值说明</span><br><span class="line">4. 使用示例</span><br><span class="line">5. 注意事项</span><br><span class="line"></span><br><span class="line">代码：</span><br><span class="line">```python</span><br><span class="line">&#123;code&#125;</span><br></pre></td></tr></table></figure><br>“””</p><pre><code>return api.chat(prompt, temperature=0.5)</code></pre><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 案例3：智能问答机器人</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">class QABot:</span><br><span class="line">    def __init__(self, knowledge_base: str):</span><br><span class="line">        self.api = DeepSeekAPI(api_key=os.getenv(&quot;DEEPSEEK_API_KEY&quot;))</span><br><span class="line">        self.knowledge_base = knowledge_base</span><br><span class="line">    </span><br><span class="line">    def answer(self, question: str) -&gt; str:</span><br><span class="line">        &quot;&quot;&quot;基于知识库回答问题&quot;&quot;&quot;</span><br><span class="line">        system_prompt = f&quot;&quot;&quot;</span><br><span class="line">你是一个专业的问答助手，基于以下知识库回答用户问题：</span><br><span class="line"></span><br><span class="line">&#123;self.knowledge_base&#125;</span><br><span class="line"></span><br><span class="line">如果问题超出知识库范围，请明确告知用户。</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">        </span><br><span class="line">        return self.api.chat(</span><br><span class="line">            message=question,</span><br><span class="line">            system_prompt=system_prompt,</span><br><span class="line">            temperature=0.3</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"># 使用示例</span><br><span class="line">knowledge = &quot;&quot;&quot;</span><br><span class="line">公司名称：ABC科技有限公司</span><br><span class="line">营业时间：周一至周五 9:00-18:00</span><br><span class="line">联系电话：123-456-7890</span><br><span class="line">主营业务：软件开发、AI解决方案</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">bot = QABot(knowledge)</span><br><span class="line">print(bot.answer(&quot;你们公司的营业时间是什么？&quot;))</span><br><span class="line">print(bot.answer(&quot;如何联系你们？&quot;))</span><br></pre></td></tr></table></figure><hr><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="Q1-API-调用速度慢怎么办？"><a href="#Q1-API-调用速度慢怎么办？" class="headerlink" title="Q1: API 调用速度慢怎么办？"></a>Q1: API 调用速度慢怎么办？</h3><ul><li>使用流式输出提升用户体验</li><li>适当降低 <code>max_tokens</code> 参数</li><li>检查网络连接</li><li>考虑使用异步调用</li></ul><h3 id="Q2-如何节省-API-费用？"><a href="#Q2-如何节省-API-费用？" class="headerlink" title="Q2: 如何节省 API 费用？"></a>Q2: 如何节省 API 费用？</h3><ul><li>合理设置 <code>max_tokens</code> 限制</li><li>使用更精确的提示词，减少重试</li><li>定期清理不必要的对话历史</li><li>对于简单任务使用更小的模型</li></ul><h3 id="Q3-如何提高回答质量？"><a href="#Q3-如何提高回答质量？" class="headerlink" title="Q3: 如何提高回答质量？"></a>Q3: 如何提高回答质量？</h3><ul><li>使用清晰、具体的提示词</li><li>提供足够的上下文信息</li><li>适当调整 <code>temperature</code> 参数</li><li>使用系统提示定义角色和行为</li></ul><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本文介绍了使用 Python 调用 DeepSeek API 的完整流程，包括：</p><p>✅ 基础调用方法<br>✅ 流式输出实现<br>✅ 多轮对话功能<br>✅ 函数调用特性<br>✅ 完整的工具类封装<br>✅ 最佳实践和实战案例  </p><p>DeepSeek 凭借其出色的性能和亲民的价格，是开发 AI 应用的优秀选择。希望本文能帮助你快速上手 DeepSeek API，开发出更多有趣的 AI 应用！</p><hr><h2 id="参考资源"><a href="#参考资源" class="headerlink" title="参考资源"></a>参考资源</h2><ul><li><a href="https://www.deepseek.com/">DeepSeek 官网</a></li><li><a href="https://platform.deepseek.com/docs">DeepSeek API 文档</a></li><li><a href="https://github.com/openai/openai-python">OpenAI Python SDK</a></li></ul><hr><blockquote><p>💡 <strong>提示</strong>: 本文的示例代码都已经过测试，可以直接使用。记得将 <code>your-deepseek-api-key</code> 替换为你自己的 API Key！</p><p>🔥 <strong>推荐阅读</strong>: 如果你对AI开发感兴趣，欢迎关注我的博客，后续会分享更多AI应用开发教程！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> DeepSeek </tag>
            
            <tag> API </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fiddler实现ios手机抓包</title>
      <link href="/2023/04/26/fiddler%E5%AE%9E%E7%8E%B0ios%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/"/>
      <url>/2023/04/26/fiddler%E5%AE%9E%E7%8E%B0ios%E6%89%8B%E6%9C%BA%E6%8A%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note default flat"><p>最近由于工作中涉及到app的测试，在测试中出现的问题不方便去定位，所以出一期配置ios手机抓包的文章记录下，由于fiddler没有手机端，所以我们需要对PC端的fiddler和手机端进行简单的配置即可实现手机端的抓包，具体步骤如下:</p></div><h2 id="对PC端的fiddler进行配置"><a href="#对PC端的fiddler进行配置" class="headerlink" title="对PC端的fiddler进行配置"></a>对PC端的fiddler进行配置</h2><ul><li>fiddler默认只会抓取http的请求，所以我们要先允许捕获https请求</li><li>操作步骤：<ul><li>打开Fiddler，点击Tool-&gt; Options-&gt; 切换到HTTPS 栏。</li><li>勾选上并Capture HTTPS CONNECTs（捕获 HTTPS 连接）和 Decrypt HTTPS traffic （HTTPS 请求解密），并安装证书（首次使用无证书，会弹出是否信任fiddler证书和安全提示，直接点击yes就行）之后点击ok保存即可</li></ul></li></ul><p><img src="https://files.mdnice.com/user/43232/428f069b-cf45-4110-ab06-2717a604e3aa.png =50%x" alt=""></p><h2 id="1-允许远程设备连接"><a href="#1-允许远程设备连接" class="headerlink" title="1.允许远程设备连接"></a>1.允许远程设备连接</h2><ol><li>如果想要捕获手机上的通信数据，就需要手机连接上Fiddler代理，而Fiddler默认是不允许其他设备进行连接的，所以我们要配置先允许远程设备连接。</li><li>操作步骤：<ul><li>打开 Fiddler，点击Tool-&gt; Options-&gt; 切换到Connections 栏；</li><li>在 Connections 面板选中 Allow remote computers to connect 允许其他设备连接，点击ok保存即可<br><img src="https://files.mdnice.com/user/43232/93f837a6-fd4b-4c46-aaf8-6e34e8634010.png =50%x" alt=""></li></ul></li></ol><h2 id="2-查看PC端的ip地址和fiddler开放的端口号"><a href="#2-查看PC端的ip地址和fiddler开放的端口号" class="headerlink" title="2.查看PC端的ip地址和fiddler开放的端口号"></a>2.查看PC端的ip地址和fiddler开放的端口号</h2><ul><li>在fiddler客户端的右上角，将鼠标悬浮在Online按钮上即可看到本机的ip地址，可以看到我电脑的ip地址为：192.168.1.6<br><img src="https://files.mdnice.com/user/43232/36fd9bbc-1e5d-48f2-92df-85a32cc85361.png =50%x" alt=""></li><li>根据下图可看到fiddler开放的默认端口为8088（可自行更改）<br><img src="https://files.mdnice.com/user/43232/adf82868-436b-47ef-93cc-9cb1c7dbaf6b.png =50%x" alt=""></li></ul><h2 id="3-手机端安装fiddler证书"><a href="#3-手机端安装fiddler证书" class="headerlink" title="3.手机端安装fiddler证书"></a>3.手机端安装fiddler证书</h2><ul><li>打开手机浏览器，输入<a href="https://192.168.1.6:8888(ip是我们本机的ip，端口号fiddler开放的端口号)，跳转到fiddler证书下载页">https://192.168.1.6:8888(ip是我们本机的ip，端口号fiddler开放的端口号)，跳转到fiddler证书下载页</a></li><li>点击【FiddlerRoot certificate】，弹出“此网址尝试下载一个配置描述文件，您要允许吗？”，点击【允许】。</li></ul><p><img src="https://files.mdnice.com/user/43232/1ea317b2-a5b6-40f4-91e0-519bde8a0639.jpg =50%x" alt=""></p><ul><li>下载完成后，打开设置-&gt;通用-&gt;vpn与设备管理-&gt;配置描述文件，点击下载的配置文件，点击安装按钮</li></ul><p><img src="https://files.mdnice.com/user/43232/8468095b-cbf1-4862-93b7-7e9644ec0152.jpg =50%x" alt=""></p><ul><li>证书安装完成后进入设置-&gt;通用-&gt;关于本机-&gt;证书信任设置-&gt;针对根证书启用完全信任，选择该证书即可</li></ul><p><img src="https://files.mdnice.com/user/43232/b7410ff7-0d49-4d76-bd82-9311aaee8007.jpg =50%x" alt=""></p><h2 id="4-手机配置代理"><a href="#4-手机配置代理" class="headerlink" title="4.手机配置代理"></a>4.手机配置代理</h2><ul><li>进入【设置】，点击链接wifi右方的感叹号，点击配置代理，设置为手动，然后填写服务器：输入fiddler的电脑ip地址192.168.1.6和端口8888，点击存储，保存即可。</li></ul><p><img src="https://files.mdnice.com/user/43232/bb898238-f862-4145-a53e-f15d4812a110.jpg =50%x" alt=""></p><div class="tip info faa-horizontal animated-hover"><p><em>配置好PC端的Fiddler和手机安装证书以及设置代理后，就可以在手机上操作app，然后在Fiddler查看发送的请求和响应了，大家赶紧去试试吧。</em> </p></div>]]></content>
      
      
      
        <tags>
            
            <tag> fiddler </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新测试平台系列文章</title>
      <link href="/2022/10/09/%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/"/>
      <url>/2022/10/09/%E6%9B%B4%E6%96%B0%E6%B5%8B%E8%AF%95%E5%B9%B3%E5%8F%B0%E7%B3%BB%E5%88%97%E6%96%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>liunx安装redis</title>
      <link href="/2022/06/25/liunx%E5%AE%89%E8%A3%85redis%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/06/25/liunx%E5%AE%89%E8%A3%85redis%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h3 id="🎉-前言"><a href="#🎉-前言" class="headerlink" title="🎉 前言"></a>🎉 前言</h3><div class="note default flat"><p>Redis 是完全开源免费的，遵守 BSD 协议，是一个灵活的高性能 key-value 数据结构存储，可以用来作为数据库、缓存和消息队列。</p></div><h2 id="环境🍦"><a href="#环境🍦" class="headerlink" title="环境🍦"></a>环境🍦</h2><ul><li>redis版本：6.2.0</li><li>liunx版本：centos 7.4<h2 id="环境搭建-🚀"><a href="#环境搭建-🚀" class="headerlink" title="环境搭建 🚀"></a>环境搭建 🚀</h2></li></ul><ol><li>&ensp;<font size=3><strong>进入/usr/local 目录下,下载<code>redis</code></strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://download.redis.io/releases/redis-6.2.0.tar.gz</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>解压</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf redis-6.2.0.tar.gz</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>进入解压目录</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> redis-6.2.0</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>编译安装</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>编译之后开始安装 🚀</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make install</span><br></pre></td></tr></table></figure></li><li><p>&ensp;<font size=3><strong>修改redis配置文件</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/redis-6.2.0/redis.conf</span><br><span class="line">将daemonize no 改成daemonize <span class="built_in">yes</span>// 配置redis为后台启动</span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1// redis 默认只允许本机访问,注掉</span><br><span class="line"><span class="built_in">bind</span> 0.0.0.0// 表示允许远程连接</span><br><span class="line">requirepass 123456   // 设置redis密码</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>&ensp;<font size=3><strong>启动<code>redis</code>并指定配置文件</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./src/redis-server /usr/local/redis-6.2.0/redis.conf</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>客户端登录</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/local/redis-6.2.0/bin</span><br><span class="line">./redis-cli -h localhost -p 6379</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>开放<code>端口</code></strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=6379/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure></li><li>&ensp;<font size=3><strong>关闭redis</strong></font><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redis-cli shutdown</span><br><span class="line">redis-cli -a 密码 shutdown// 设置了密码的话用这条命令关闭redis</span><br></pre></td></tr></table></figure></li></ol><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><div class="tip info faa-horizontal animated-hover"><p><em>如果是阿里云服务器需配置安全组，将6379端口开放即可，切记！</em> </p></div>]]></content>
      
      
      <categories>
          
          <category> redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>liunx安装mysql并配置远程连接</title>
      <link href="/2022/06/19/liunx%E5%AE%89%E8%A3%85mysql-%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2022/06/19/liunx%E5%AE%89%E8%A3%85mysql-%E5%B9%B6%E9%85%8D%E7%BD%AE%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note default flat"><p>MySQL 是一款安全、跨平台、高效的，并与 PHP、Java 等主流编程语言紧密结合的数据库系统。该数据库系统是由瑞典的 MySQL AB 公司开发、发布并支持，由 MySQL 的初始开发人员 David Axmark 和 Michael Monty Widenius 于 1995 年建立的。</p></div><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>&ensp;<font size=3><strong>首先需要确认下是否已经安装了mysql</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa | grep mysql</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>这时候没有任何输出,则代表没有安装MySQL</strong></font><br>&ensp;<font size=3><strong>如果查到了相关文件，则需要删除mysql，然后重新安装，如下图所示：</strong></font><br> <img src="/images/mysql_jpg1.jpg" /></p><h3 id="删除mysql"><a href="#删除mysql" class="headerlink" title="删除mysql"></a>删除mysql</h3><p>&ensp;<font size=3><strong>使用 rpm -e 文件名 的命令删除该文件，以上面文件为例，执行以下命令：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -e mysql-community-release-el7-5.noarch</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>重复使用 rpm -e 命令删除文件，直到所有文件完全删除</strong></font><br>&ensp;<font size=3><strong>如果提示依赖包错误，则使用以下命令尝试：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ev MySQL-client-5.5.25a-1.rhel5 --nodeps</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>使用yum卸载安装的mysql</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum remove mysql mysql-server mysql-libs mysql-server</span><br></pre></td></tr></table></figure></p><h3 id="删除mysql目录"><a href="#删除mysql目录" class="headerlink" title="删除mysql目录"></a>删除mysql目录</h3><p>&ensp;<font size=3><strong>全局搜索名称包含 mysql 的所有文件</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name <span class="string">&quot;*mysql*&quot;</span></span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>使用 rm -rf 命令删除所有搜索出来的mysql文件。</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">rm</span> -rf /usr/lib/mysql</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>最后再检查一下：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rpm -qa|grep mysql</span><br><span class="line">find / -name <span class="string">&quot;*mysql*&quot;</span></span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>如果有的话继续执行删除，直到删干净为止！</strong></font></p><h3 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h3><p>&ensp;<font size=3><strong>Linux平台上推荐使用RPM包来安装mysql。</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>rpm安装：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>yum安装mysql-server：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>等待安装完成后,重启MySQL服务: </strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld restart</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>查看MySQL服务状态：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service mysqld status</span><br></pre></td></tr></table></figure></p><h3 id="远程访问"><a href="#远程访问" class="headerlink" title="远程访问"></a>远程访问</h3><p>&ensp;<font size=3><strong>远程访问MySQL服务</strong></font><br>&ensp;<font size=3><strong>首先，远程访问需要设置一个允许远程访问的用户</strong></font><br>&ensp;<font size=3><strong>新安装的MySQL是没有密码的,输入命令进入数据库：</strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure></p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>;</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>授予<span class='p red'>admin</span>用户所有访问权限,<em><span class='p red'>.</span></em> 代表任意数据库的任意表,<span class='p red'>%</span>代表任意ip地址(这里也可以直接授予root用户这种权限)</strong></font><br>&ensp;<font size=3><strong>授权完成后刷新一下 : </strong></font><br> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>修改密码 : </strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use mysql;</span><br><span class="line"><span class="built_in">set</span> password <span class="keyword">for</span> <span class="string">&#x27;admin&#x27;</span>@<span class="string">&#x27;%&#x27;</span>=password(<span class="string">&#x27;123456&#x27;</span>);</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>常用命令： </strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">service mysqld start <span class="comment"># 启动mysql服务</span></span><br><span class="line">service mysqld stop <span class="comment"># 停止mysql服务</span></span><br><span class="line">service mysqld restart <span class="comment"># 重启mysql服务</span></span><br><span class="line">service mysqld status <span class="comment"># 查看mysql服务状态</span></span><br></pre></td></tr></table></figure></p><div class="tip info faa-horizontal animated-hover"><p><em>此时，mysql就配置完成了，可尝试使用navicat测试连接</em> </p></div><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><div class="tip info faa-horizontal animated-hover"><p><em>如果是阿里云服务器需配置安全组，将3306端口开放即可，切记！</em> </p></div><div class="tip info faa-horizontal animated-hover"><p><em>如果上述方法都尝试了，还是连接不上，可查看防火墙端口是否开放。具体方法自行百度，不在赘述</em> </p></div><hr>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> liunx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python导出指定项目依赖包</title>
      <link href="/2022/06/03/python%E5%AF%BC%E5%87%BA%E6%8C%87%E5%AE%9A%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%8C%85/"/>
      <url>/2022/06/03/python%E5%AF%BC%E5%87%BA%E6%8C%87%E5%AE%9A%E9%A1%B9%E7%9B%AE%E4%BE%9D%E8%B5%96%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note default simple"><p>很多朋友都知道，利用pip也好，利用conda也好，我们可以使用pip freeze、conda export等语句来对当前的Python环境依赖进行导出备份，以方便在其他机器上还原环境，但此类环境依赖导出方法的局限在于，它会将当前环境下所有已安装的库信息进行导出，使得导出的结果繁杂臃肿。 而如果我们只想针对某个Python项目工程，将其内部真正导入的库信息进行导出，就可以用到pipreqs这个工具，使用pip install pipreqs进行安装之后，就可以以命令行的形式使用它</p></div><hr><h2 id="pipreqs的使用"><a href="#pipreqs的使用" class="headerlink" title="pipreqs的使用"></a>pipreqs的使用</h2><h3 id="安装pipreqs"><a href="#安装pipreqs" class="headerlink" title="安装pipreqs"></a>安装pipreqs</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pipreqs</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>安装完毕之后，就可以使用<span class='p blue'>pipreqs</span>命令来导出当前Python环境下的依赖包信息，进入项目根目录执行如下命令：</strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>若成功，则会在项目根目录下生成一个<span class='p blue'>requirements.txt</span>文件。有时也会遇到一些<span class='p red'>错误</span>，具体如下：</strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;E:\python\3.8.0\lib\runpy.py&quot;</span>, line 192, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">    <span class="built_in">return</span> _run_code(code, main_globals, None,</span><br><span class="line">  File <span class="string">&quot;E:\python\3.8.0\lib\runpy.py&quot;</span>, line 85, <span class="keyword">in</span> _run_code</span><br><span class="line">    <span class="built_in">exec</span>(code, run_globals)</span><br><span class="line">  File <span class="string">&quot;E:\Python\3.8.0\Scripts\pipreqs.exe\__main__.py&quot;</span>, line 7, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;E:\python\3.8.0\lib\site-packages\pipreqs\pipreqs.py&quot;</span>, line 470, <span class="keyword">in</span> main</span><br><span class="line">    init(args)</span><br><span class="line">  File <span class="string">&quot;E\python\3.8.0\lib\site-packages\pipreqs\pipreqs.py&quot;</span>, line 406, <span class="keyword">in</span> init</span><br><span class="line">    candidates = get_all_imports(input_path,</span><br><span class="line">  File <span class="string">&quot;E:\python\3.8.0\lib\site-packages\pipreqs\pipreqs.py&quot;</span>, line 122, <span class="keyword">in</span> get_all_imports</span><br><span class="line">    contents = f.read()</span><br><span class="line">UnicodeDecodeError: <span class="string">&#x27;gbk&#x27;</span> codec can<span class="string">&#x27;t decode byte 0xa4 in position 135: illegal multibyte sequence</span></span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong><span class='p green'>解决办法：</span></strong></font><br>&ensp;<font size=3><strong>1. 这是一个编码解码时发生的错误，我们需要在生成依赖包信息时指定编码方式。具体方式如以下命令：</strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pipreqs ./ --encoding=utf8</span><br></pre></td></tr></table></figure></p><h2 id="导入依赖包"><a href="#导入依赖包" class="headerlink" title="导入依赖包"></a>导入依赖包</h2><p>&ensp;<font size=3><strong>导入依赖包的方法：</strong></font><br>&ensp;<font size=3><strong>1. 在项目根目录下执行如下命令：</strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure><br>&ensp;<font size=3><strong>也可指定使用其他源来加速安装依赖包，如豆瓣pypi，比如：</strong></font><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt -i https://pypi.douban.com/simple</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 导出依赖包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>把github贡献日历部署到博客上</title>
      <link href="/2022/05/29/github%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86%E9%83%A8%E7%BD%B2%E5%88%B0hexo/"/>
      <url>/2022/05/29/github%E8%B4%A1%E7%8C%AE%E6%97%A5%E5%8E%86%E9%83%A8%E7%BD%B2%E5%88%B0hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><font size=3><div class="note default flat"><p>此教程转载自Reverse大佬(<a href="https://blog.c12th.cn/archives/6.html">https://blog.c12th.cn/archives/6.html</a>)</p></div></font><hr><p><img src="https://ghchart.rshah.org/409ba5/12thstan" alt="12thstan's Github Chart" /></p><p><strong><p align = "center">效果展示</p></strong></p><hr><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><h2 id="直接部署"><a href="#直接部署" class="headerlink" title="直接部署"></a>直接部署</h2><ul><li>这里用到了 <a href="https://github.com/2016rshah/githubchart-api">2016rshah 大佬</a> 的方法。</li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/github用户名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;github用户名&#x27;s Github chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><a href="https://blog.csdn.net/weixin_44580076/article/details/118737615">这个方法最绝的地方是，将你自己的贡献日历变成了图片，只需要使用一行 HTML 语句，就可以在任何地方使用贡献日历。</a></li></ul><p><br/></p><ul><li>如我在当前页面下部署</li></ul><p><img src="https://ghchart.rshah.org/12thstan" alt="12thstan's Github chart" /></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/12thstan&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;12thstan&#x27;s Github chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="自定义-颜色"><a href="#自定义-颜色" class="headerlink" title="自定义 颜色"></a>自定义 颜色</h2><ul><li>自定义 <strong>颜色</strong> <strong>#000000</strong> <em>十六进制颜色代码</em> <strong><font size="3" color="red">注意格式不带#</font></strong></li></ul><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/000000/github用户名&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;github用户名&#x27;s Github Chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><p><br/></p><ul><li><font size="3" color="blue">蓝色</font> <strong>#0000FF</strong></li></ul><p><img src="https://ghchart.rshah.org/0000FF/12thstan" alt="12thstan's Github Chart" /></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/0000FF/12thstan&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;12thstan&#x27;s Github Chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><font size="3" color="red">红色</font> <strong>#ff0000</strong></li></ul><p><img src="https://ghchart.rshah.org/ff0000/12thstan" alt="12thstan's Github Chart" /></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/ff0000/12thstan&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;12thstan&#x27;s Github Chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><ul><li><font size="3" color="green">绿色</font> <strong>#00785D</strong></li></ul><p><img src="https://ghchart.rshah.org/00785D/12thstan" alt="12thstan's Github Chart" /></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://ghchart.rshah.org/00785D/12thstan&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;12thstan&#x27;s Github Chart&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure><hr><h2 id="部署到-Next-主题"><a href="#部署到-Next-主题" class="headerlink" title="部署到 Next 主题"></a>部署到 Next 主题</h2><ul><li><strong>这部分是关于 Next 主题的设置，请</strong> <font size="3" color="blue">点击链接</font> <strong>移步到 Next 主题</strong></li></ul><div class="tag link"><a class="link-card" title="把github贡献日历部署到博客上(二)" href="https://next.c12th.cn/archives/3.html"><div class="left"><img src="https://pic.imgdb.cn/item/624aa2d5239250f7c5147553.ico"/></div><div class="right"><p class="text">把github贡献日历部署到博客上(二)</p><p class="url">https://next.c12th.cn/archives/3.html</p></div></a></div><hr><h1 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h1><div class="tip info faa-horizontal animated-hover"><p>如不能使用 <strong>HTML语句</strong> 可看另一种写法 <em><a href="https://jsimple.c12th.cn/posts/3/">把github贡献日历部署到博客上(二)</a></em></p></div><div class="tip cogs faa-horizontal animated-hover"><p>第一篇 <em><a href="https://blog.c12th.cn/archives/5.html">把github贡献日历部署到博客上(一)</a></em> </p></div><hr>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/2022/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
      <url>/2022/05/28/Hexo%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><div class="note default flat"><p>Hexo 是一个基于NodeJS的静态博客网站生成器，使用Hexo不需开发，只要进行一些必要的配置即可生成一个个性化的博客网站，并且完美支持Markdown格式，非常方便。</p></div><hr><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>&ensp;<font size=3><strong>windows可直接到<a href=https://git-scm.com/downloads>Git官网</a>自行下载安装，一路Next，安装完成后，需要将Git命令行工具添加到环境变量中，不在赘述。linux可通过终端命令行安装，如下：</strong> </font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install git</span><br></pre></td></tr></table></figure><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><p>&ensp;<font size=3><strong>windows可直接到<a href=https://nodejs.org/en/>Node.js官网</a>自行下载安装，一路Next,下载完成后需将.exe文件加入环境变量，不在赘述。</strong></font></p><h3 id="linux安装Node-js"><a href="#linux安装Node-js" class="headerlink" title="linux安装Node.js"></a>linux安装Node.js</h3><p>&ensp;<font size=3><strong>在官网下载指定的包后上传至linux指定位置，然后进入系统目录，执行以下命令解压：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf node-v10.6.0-linux-x64.tar.xz</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>通过建立软连接，将解压后的文件夹放入环境变量中，如下：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /usr/local/node-v10.6.0-linux-x64/nodejs/bin/npm /usr/local/bin/</span><br><span class="line"><span class="built_in">ln</span> -s /usr/local/node-v10.6.0-linux-x64/nodejs/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>检查是否安装成功，如下：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><hr><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>&ensp;<font size=3><strong>直接通过终端命令进行安装（安装完成后需将hexo.cmd所在目录加入环境变量中，否则执行hexo命令会报错，hexo.cmd默认安装在Node目录下）：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>检查是否安装成功，如下：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>新建一个文件夹，来进行初始化项目：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>安装依赖包：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>生成静态文件：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>启动服务：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong> 以上操作完成后即可通过浏览器输入网址<a href="http://localhost:4000访问项目，效果如下：">http://localhost:4000访问项目，效果如下：</a></strong></font></p><p><img src="/images/hexo.png" alt=""></p><hr><h3 id="将项目部署至github"><a href="#将项目部署至github" class="headerlink" title="将项目部署至github"></a>将项目部署至github</h3><p>&ensp;<font size=3><strong>首先右键打开git bash，然后输入下面命令配置git的相关信息：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>输入下面命令生成ssh key：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>创建完成后会在本地生成一个文件夹，在文件中找到id_rsa.pub，复制出来，默认目录为：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\17621\.ssh</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>然后在github点击自己的头像，点击setting，再点击SSH and GPG keys，新建一个SSH，名字随便。将刚刚复制出来的id_rsa.pub添加进去，点击save，完成。</strong></font></p><p>&ensp;<font size=3><strong>在github新建一个项目，如下图所示：</strong></font><br><img src="/images/new_repository.jpg" alt=""></p><p>&ensp;<font size=3><strong>在Repository name中输入你的用户名.github.io，点击Create repository，即可完成项目的创建。</strong></font><br>&ensp;<font size=3><strong> 然后可通过page页面查看项目的地址，如下：</strong></font><br><img src="/images/repository_url.jpg" alt=""></p><hr><h3 id="将项目部署至GitHub-Pages"><a href="#将项目部署至GitHub-Pages" class="headerlink" title="将项目部署至GitHub Pages"></a>将项目部署至GitHub Pages</h3><p>&ensp;<font size=3><strong>打开项目根目录下的_config.yml文件，拉到最后一行，添加如下内容：</strong></font></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">    <span class="attr">repository:</span> <span class="string">github.com/你的用户名/你的用户名.github.io.git</span></span><br><span class="line">    <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>安装hexo-deployer-git，并在hexo中安装：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>然后在项目根目录下执行以下命令：</strong></font></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><p>&ensp;<font size=3><strong>项目生成后，可通过浏览器输入网址<a href="http://你的用户名.github.io访问项目，效果如下：">http://你的用户名.github.io访问项目，效果如下：</a></strong></font></p><p><img src="/images/blog_index.jpg" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决pip下载python包很慢的问题</title>
      <link href="/2022/05/28/%E8%A7%A3%E5%86%B3pip%E4%B8%8B%E8%BD%BDpython%E5%8C%85%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2022/05/28/%E8%A7%A3%E5%86%B3pip%E4%B8%8B%E8%BD%BDpython%E5%8C%85%E5%BE%88%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>pip是python的包管理工具，它可以让我们安装python的包，并且可以自动更新，但是pip是从pypi中下载文件的，pypi是python官方的第三方库的仓库， 用的是国外的服务器，下载速度自然很慢。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>我们只需要在pip下载时将下载源切换为国内源即可（module替换为你要下载的包名）</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple module <span class="comment"># 使用豆瓣源</span></span><br><span class="line"> </span><br><span class="line">pip install -i http://mirrors.aliyun.com/pypi/simple/ module  <span class="comment"># 阿里云 </span></span><br><span class="line"> </span><br><span class="line">pip install -i  https://pypi.mirrors.ustc.edu.cn/simple/ module  <span class="comment"># 中国科技大学 </span></span><br><span class="line"> </span><br><span class="line">pip install -i  http://pypi.douban.com/simple/ module  <span class="comment"># 豆瓣(douban) </span></span><br><span class="line"> </span><br><span class="line">pip install -i  https://pypi.tuna.tsinghua.edu.cn/simple/ module  <span class="comment"># 清华大学 </span></span><br><span class="line"> </span><br><span class="line">pip install -i  http://pypi.mirrors.ustc.edu.cn/simple/ module  <span class="comment"># 中国科学技术大学</span></span><br></pre></td></tr></table></figure><p>如果你对软件测试有兴趣，可以添加微信一起交流。<br><img src="/images/wechat.jpg" width="50%" height="50%" /></p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pip </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
